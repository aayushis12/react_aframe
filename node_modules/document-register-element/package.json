{
  "_args": [
    [
      {
        "raw": "document-register-element@github:dmarcos/document-register-element#8ccc532b7",
        "scope": null,
        "escapedName": "document-register-element",
        "name": "document-register-element",
        "rawSpec": "github:dmarcos/document-register-element#8ccc532b7",
        "spec": "github:dmarcos/document-register-element#8ccc532b7",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:dmarcos/document-register-element.git#8ccc532b7",
          "sshUrl": "git+ssh://git@github.com/dmarcos/document-register-element.git#8ccc532b7",
          "httpsUrl": "git+https://github.com/dmarcos/document-register-element.git#8ccc532b7",
          "gitUrl": "git://github.com/dmarcos/document-register-element.git#8ccc532b7",
          "shortcut": "github:dmarcos/document-register-element#8ccc532b7",
          "directUrl": "https://raw.githubusercontent.com/dmarcos/document-register-element/8ccc532b7/package.json"
        }
      },
      "C:\\Users\\aayushi.sinha\\Documents\\GitHub Repo\\copy\\node_modules\\aframe"
    ]
  ],
  "_from": "dmarcos/document-register-element#8ccc532b7",
  "_id": "document-register-element@0.5.4",
  "_inCache": true,
  "_location": "/document-register-element",
  "_phantomChildren": {},
  "_requested": {
    "raw": "document-register-element@github:dmarcos/document-register-element#8ccc532b7",
    "scope": null,
    "escapedName": "document-register-element",
    "name": "document-register-element",
    "rawSpec": "github:dmarcos/document-register-element#8ccc532b7",
    "spec": "github:dmarcos/document-register-element#8ccc532b7",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:dmarcos/document-register-element.git#8ccc532b7",
      "sshUrl": "git+ssh://git@github.com/dmarcos/document-register-element.git#8ccc532b7",
      "httpsUrl": "git+https://github.com/dmarcos/document-register-element.git#8ccc532b7",
      "gitUrl": "git://github.com/dmarcos/document-register-element.git#8ccc532b7",
      "shortcut": "github:dmarcos/document-register-element#8ccc532b7",
      "directUrl": "https://raw.githubusercontent.com/dmarcos/document-register-element/8ccc532b7/package.json"
    }
  },
  "_requiredBy": [
    "/aframe"
  ],
  "_resolved": "git://github.com/dmarcos/document-register-element.git#8ccc532b7f3744be954574caf3072a5fd260ca90",
  "_shasum": "0152bd7e585647ccf72c343969a7c64f96e2ff1e",
  "_shrinkwrap": null,
  "_spec": "document-register-element@github:dmarcos/document-register-element#8ccc532b7",
  "_where": "C:\\Users\\aayushi.sinha\\Documents\\GitHub Repo\\copy\\node_modules\\aframe",
  "author": {
    "name": "Andrea Giammarchi",
    "url": "http://webreflection.blogspot.com/"
  },
  "bugs": {
    "url": "https://github.com/WebReflection/document-register-element/issues"
  },
  "dependencies": {},
  "description": "A stand-alone working lightweight version of the W3C Custom Elements specification",
  "devDependencies": {
    "jshint": "~2.x",
    "phantomjs": "~1.x",
    "tiny-cdn": "~0.5.x",
    "uglify-js": "1.x",
    "wru": "~0.2.x"
  },
  "gitHead": "8ccc532b7f3744be954574caf3072a5fd260ca90",
  "homepage": "https://github.com/WebReflection/document-register-element",
  "keywords": [
    "Web",
    "Components",
    "Custom",
    "Element",
    "Elements",
    "DOM",
    "W3C",
    "Polymer",
    "polyfill",
    "alternative"
  ],
  "license": "MIT",
  "main": "./build/document-register-element.js",
  "name": "document-register-element",
  "optionalDependencies": {},
  "readme": "document-register-element\r\n=========================\r\n\r\nA stand-alone working lightweight version of the [W3C Custom Elements](http://w3c.github.io/webcomponents/spec/custom/) specification.\r\n\r\n\r\n[![build status](https://travis-ci.org/WebReflection/document-register-element.svg)](https://travis-ci.org/WebReflection/document-register-element)\r\n\r\n\r\n### How\r\n\r\n`npm install document-register-element` will put [build/document-register-element.js](build/document-register-element.js) inside `node_modules/document-register-element/` of your project.\r\n\r\nIf you're working with a tool like Browserify, Webpack, RequireJS, etc, you can\r\nimport the script at some point before you need to use the API.\r\n\r\n```js\r\nimport 'document-register-element' // ES2015\r\n// or\r\nrequire('document-register-element') // CommonJS\r\n// or\r\ndefine(['document-register-element'], function() {}) // AMD\r\n```\r\n\r\nIf you're not using a module system, just place\r\n`node_modules/document-register-element/build/document-register-element.js`\r\nsomewhere where it will be served by your server, then put\r\n\r\n```html\r\n<script src=\"/path/to/document-register-element.js\"></script>\r\n```\r\n\r\nin your head element and you should be good to go.\r\n\r\n#### via CDN\r\nMany thanks to [cdnjs](http://www.cdnjs.com) for hosting this script. Following an example on how to include it.\r\n```html\r\n<script\r\n  src=\"//cdnjs.cloudflare.com/ajax/libs/document-register-element/0.5.3/document-register-element.js\"\r\n>/* W3C Custom Elements */</script>\r\n```\r\n\r\n### TL;DR does it work ?\r\nIf you [see the first clock ticking](http://webreflection.github.io/document-register-element/test/examples/x-clock.html), the TL;DR answer is yes.\r\n\r\n\r\n### Usage Example\r\n\r\nA basic HTML example page\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>testing my-element</title>\r\n  <script src=\"js/document-register-element.js\"></script>\r\n  <script src=\"js/my-element.js\"></script>\r\n</head>\r\n<body>\r\n  <my-element>\r\n    some content\r\n  </my-element>\r\n</body>\r\n```\r\n\r\nwith the following `my-element.js` content\r\n```javascript\r\nvar MyElement = document.registerElement(\r\n  'my-element',\r\n  {\r\n    prototype: Object.create(\r\n      HTMLElement.prototype, {\r\n      createdCallback: {value: function() {\r\n        console.log('here I am ^_^ ');\r\n        console.log('with content: ', this.textContent);\r\n      }},\r\n      attachedCallback: {value: function() {\r\n        console.log('live on DOM ;-) ');\r\n      }},\r\n      detachedCallback: {value: function() {\r\n        console.log('leaving the DOM :-( )');\r\n      }},\r\n      attributeChangedCallback: {value: function(\r\n        name, previousValue, value\r\n      ) {\r\n        if (previousValue == null) {\r\n          console.log(\r\n            'got a new attribute ', name,\r\n            ' with value ', value\r\n          );\r\n        } else if (value == null) {\r\n          console.log(\r\n            'somebody removed ', name,\r\n            ' its value was ', previousValue\r\n          );\r\n        } else {\r\n          console.log(\r\n            name,\r\n            ' changed from ', previousValue,\r\n            ' to ', value\r\n          );\r\n        }\r\n      }}\r\n    })\r\n  }\r\n);\r\n```\r\n\r\n\r\n### Why\r\nI wrote a [couple](http://webreflection.blogspot.co.uk/2014/07/a-w3c-custom-elements-alternative.html) of blog [posts](http://webreflection.blogspot.co.uk/2015/03/bringing-custom-elements-to-ie8.html) about this polyfill, and here's the quick summary:\r\n\r\n* [document-register-element.js](build/document-register-element.js) is a stand alone polyfill which aims to support as many browsers as possible, without requiring extra dependencies at all, all in about **3KB** minified and gzipped.\r\n\r\nAdd if you want the [dom4](https://github.com/WebReflection/dom4#dom4) normalizer, and you'll find yourself in a modern DOM environment that works reliably with today's browsers, with an eye always open on performance.\r\n\r\n\r\n\r\n### Tested On\r\n\r\nThe [live test page](http://webreflection.github.io/document-register-element/test/) is here, containing all tests as listed in [the test file](test/document-register-element.js).\r\n\r\nThe following list of **desktop** browsers has been successfully tested:\r\n\r\n  * Chrome\r\n  * Firefox\r\n  * IE 8 or greater (please read about IE8 caveats)\r\n  * Safari\r\n  * Opera\r\n\r\nThe following list of **mobile** OS has been successfully tested:\r\n\r\n  * iOS 5.1 or greater\r\n  * Android 2.2 or greater\r\n  * FirefoxOS 1.1 or greater\r\n  * KindleFire 3 or greater\r\n  * Windows Phone 7 or greater\r\n  * Opera Mobile 12 or greater\r\n  * Blackberry OS 7* and OS 10\r\n  * webOS 2 or LG TV\r\n  * Samsung Bada OS 2 or greater\r\n  * NOKIA Asha with Express Browser\r\n\r\nThe good old [BB OS 7](http://us.blackberry.com/software/smartphones/blackberry-7-os.html) is the only one failing the test with `className` which is not notified as `attributeChanged` when it's changed. This means BB OS 7 will also fail with `id`, however changing `id` at runtime has never been a common or useful pattern.\r\n\r\n\r\n### Common Issues + Caveat\r\nHere a list of gotchas you might encounter when developing *CustomElement* components.\r\n\r\n#### HTML{TABLE|ROW|INPUT|SELECT|others...}Element\r\nAs described in [issue 6](https://github.com/WebReflection/document-register-element/issues/6) it's not possible to fully inherit a table, input, select, or other special element behaviors.\r\n```js\r\n// This will NOT work as expected\r\ndocument.registerElement(\r\n  'my-input',\r\n  {\r\n    prototype: Object.create(\r\n      HTMLInputElement.prototype\r\n    )\r\n  }\r\n);\r\n\r\nvar mi = document.createElement('my-input');\r\n```\r\n\r\nThe correct way to properly implement a custom input that will be also backward compatible is the following one:\r\n```js\r\n// This will NOT work as expected\r\ndocument.registerElement(\r\n  'my-input',\r\n  {\r\n    extends: 'input', // <== IMPORTANT\r\n    prototype: Object.create(\r\n      HTMLInputElement.prototype\r\n    )\r\n  }\r\n);\r\n\r\n// how to create the input\r\nvar mi = document.createElement(\r\n  'input',    // the extend\r\n  'my-input'  // the enriched custom definition\r\n);\r\n```\r\n\r\nAnother approach is to use just a basic `HTMLElement` component and initialize its content at runtime.\r\n```js\r\ndocument.registerElement(\r\n  'my-input',\r\n  {\r\n    prototype: Object.create(\r\n      HTMLElement.prototype,\r\n      {\r\n        createdCallback: {value: function () {\r\n          // here the input\r\n          this.el = this.appendChild(\r\n            document.createElement('input')\r\n          );\r\n        }}\r\n      }\r\n    )\r\n  }\r\n);\r\n\r\nvar mi = document.createElement('my-input');\r\n```\r\nIn this case every method that wants to interact with the input will refer `this.el` instead of just `this`.\r\n\r\n\r\n#### Using `innerHTML`\r\nIn order to avoid huge performance impact, native behavior overwrite problems and incompatibilities, there is now a [helper script](https://github.com/WebReflection/document-register-element/blob/master/build/innerHTML.max.js),\r\nwhich aim is to make **off-line custom elements creation** possible using template strings instead of needing manual `document.createElement` replacements.\r\n\r\nThe helper is a simple `innerHTML` function that returns the given node, after setting `innerHTML` and, in case the polyfill is used, initialize nodes.\r\n\r\nThis helper is needed in order to be aligned with native implementations, but please remember that `createdCallback` could be asynchronous, even if triggered ASAP after injecting HTML through this function.\r\n\r\n\r\n\r\n#### Changing the `style` property\r\n\r\nIf you change the style property via `node.style.cssText` or `node.style.backgroundColor = \"red\"` this change will most likely reflect through `node.getAttribute(\"style\")`.\r\n\r\nIn order to prevent footguns inside `attributeChangedCallback` invocations causing potential stack overflows, the `style` property has been filtered starting from version `0.1.1`, also reflecting current native implementation where changing this special property won't invoke the callback.\r\n\r\n(yes, even using `node.setAttribute(\"style\", \"value\")` that you shouldn't ... just use `node.style.cssText = \"value\"` instead)\r\n\r\n\r\n#### About IE8\r\n\r\nStarting from version `0.2.0` there is an experimental support for IE8.\r\nThere is a specific file that needs to be loaded in IE8 only upfront, plus a sequence of polyfills\r\nthat will be simply ignored by every browser but downloaded in IE8.\r\n\r\nPlease check [base.html file](examples/base.html) in order to have a basic model to reuse in case you want to support IE8.\r\n\r\nAll tests pass and there is a [map component example](http://webreflection.github.io/document-register-element/test/examples/x-map.html) that already works in IE8 too.\r\n\r\nRemember there are few things to consider when IE8 is a target but since it didn't cost many bytes\r\nto have it in, I've decided to merge the logic and maintain only one file that will work in IE8 too.\r\n\r\n\r\n#### IE8 caveats\r\n\r\n  * it's IE8\r\n  * all operations are batched and eventually executed ASAP but asynchronously. This behavior is closer to native Mutation Observers but might have some extra glitch in rendering time\r\n  * `className` is right now the only special attribute that reacts. Others might be implemented in the [dre-ie8-upfront-fix.js](src/dre-ie8-upfront-fix.js) file.\r\n  * in order to have node reacting to attributes changes, these must be live on the DOM\r\n  * if you are using `extends` when create a custom element, remember to minify the production code or wrap such reserved word in quotes\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/WebReflection/document-register-element.git"
  },
  "scripts": {
    "test": "phantomjs testrunner.js",
    "web": "node node_modules/tiny-cdn/tiny-cdn run -p=1337"
  },
  "version": "0.5.4"
}
