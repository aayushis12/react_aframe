{
  "_args": [
    [
      {
        "raw": "debug@github:ngokevin/debug#noTimestamp",
        "scope": null,
        "escapedName": "debug",
        "name": "debug",
        "rawSpec": "github:ngokevin/debug#noTimestamp",
        "spec": "github:ngokevin/debug#noTimestamp",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ngokevin/debug.git#noTimestamp",
          "sshUrl": "git+ssh://git@github.com/ngokevin/debug.git#noTimestamp",
          "httpsUrl": "git+https://github.com/ngokevin/debug.git#noTimestamp",
          "gitUrl": "git://github.com/ngokevin/debug.git#noTimestamp",
          "shortcut": "github:ngokevin/debug#noTimestamp",
          "directUrl": "https://raw.githubusercontent.com/ngokevin/debug/noTimestamp/package.json"
        }
      },
      "C:\\Users\\aayushi.sinha\\Documents\\GitHub Repo\\copy\\node_modules\\aframe"
    ]
  ],
  "_from": "ngokevin/debug#noTimestamp",
  "_id": "debug@2.2.0",
  "_inCache": true,
  "_location": "/aframe/debug",
  "_phantomChildren": {},
  "_requested": {
    "raw": "debug@github:ngokevin/debug#noTimestamp",
    "scope": null,
    "escapedName": "debug",
    "name": "debug",
    "rawSpec": "github:ngokevin/debug#noTimestamp",
    "spec": "github:ngokevin/debug#noTimestamp",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ngokevin/debug.git#noTimestamp",
      "sshUrl": "git+ssh://git@github.com/ngokevin/debug.git#noTimestamp",
      "httpsUrl": "git+https://github.com/ngokevin/debug.git#noTimestamp",
      "gitUrl": "git://github.com/ngokevin/debug.git#noTimestamp",
      "shortcut": "github:ngokevin/debug#noTimestamp",
      "directUrl": "https://raw.githubusercontent.com/ngokevin/debug/noTimestamp/package.json"
    }
  },
  "_requiredBy": [
    "/aframe"
  ],
  "_resolved": "git://github.com/ngokevin/debug.git#ef5f8e66d49ce8bc64c6f282c15f8b7164409e3a",
  "_shasum": "a37ec13545482e5f681934bec17b50fa679aa5d9",
  "_shrinkwrap": null,
  "_spec": "debug@github:ngokevin/debug#noTimestamp",
  "_where": "C:\\Users\\aayushi.sinha\\Documents\\GitHub Repo\\copy\\node_modules\\aframe",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "browser": "./browser.js",
  "bugs": {
    "url": "https://github.com/visionmedia/debug/issues"
  },
  "component": {
    "scripts": {
      "debug/index.js": "browser.js",
      "debug/debug.js": "debug.js"
    }
  },
  "contributors": [
    {
      "name": "Nathan Rajlich",
      "email": "nathan@tootallnate.net",
      "url": "http://n8.io"
    }
  ],
  "dependencies": {},
  "description": "small debugging utility",
  "devDependencies": {
    "browserify": "9.0.3",
    "mocha": "*"
  },
  "gitHead": "ef5f8e66d49ce8bc64c6f282c15f8b7164409e3a",
  "homepage": "https://github.com/visionmedia/debug#readme",
  "keywords": [
    "debug",
    "log",
    "debugger"
  ],
  "license": "MIT",
  "main": "./node.js",
  "name": "debug",
  "optionalDependencies": {},
  "readme": "# debug\r\n\r\n  tiny node.js debugging utility modelled after node core's debugging technique.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install debug\r\n```\r\n\r\n## Usage\r\n\r\n With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you're used to work fine. A unique color is selected per-function for visibility.\r\n\r\nExample _app.js_:\r\n\r\n```js\r\nvar debug = require('debug')('http')\r\n  , http = require('http')\r\n  , name = 'My App';\r\n\r\n// fake app\r\n\r\ndebug('booting %s', name);\r\n\r\nhttp.createServer(function(req, res){\r\n  debug(req.method + ' ' + req.url);\r\n  res.end('hello\\n');\r\n}).listen(3000, function(){\r\n  debug('listening');\r\n});\r\n\r\n// fake worker of some kind\r\n\r\nrequire('./worker');\r\n```\r\n\r\nExample _worker.js_:\r\n\r\n```js\r\nvar debug = require('debug')('worker');\r\n\r\nsetInterval(function(){\r\n  debug('doing some work');\r\n}, 1000);\r\n```\r\n\r\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\r\n\r\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\r\n\r\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\r\n\r\n#### Windows note\r\n\r\n On Windows the environment variable is set using the `set` command.\r\n\r\n ```cmd\r\n set DEBUG=*,-not_this\r\n ```\r\n\r\nThen, run the program to be debugged as usual.\r\n\r\n## Millisecond diff\r\n\r\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls.\r\n\r\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\r\n\r\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\r\n\r\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\r\n\r\n## Conventions\r\n\r\n If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\".\r\n\r\n## Wildcards\r\n\r\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with `DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\r\n\r\n  You can also exclude specific debuggers by prefixing them with a \"-\" character.  For example, `DEBUG=*,-connect:*` would include all debuggers except those starting with \"connect:\".\r\n\r\n## Browser support\r\n\r\n  Debug works in the browser as well, currently persisted by `localStorage`. Consider the situation shown below where you have `worker:a` and `worker:b`, and wish to debug both. Somewhere in the code on your page, include:\r\n\r\n```js\r\nwindow.myDebug = require(\"debug\");\r\n```\r\n\r\n  (\"debug\" is a global object in the browser so we give this object a different name.) When your page is open in the browser, type the following in the console:\r\n\r\n```js\r\nmyDebug.enable(\"worker:*\")\r\n```\r\n\r\n  Refresh the page. Debug output will continue to be sent to the console until it is disabled by typing `myDebug.disable()` in the console.\r\n\r\n```js\r\na = debug('worker:a');\r\nb = debug('worker:b');\r\n\r\nsetInterval(function(){\r\n  a('doing some work');\r\n}, 1000);\r\n\r\nsetInterval(function(){\r\n  b('doing some work');\r\n}, 1200);\r\n```\r\n\r\n#### Web Inspector Colors\r\n\r\n  Colors are also enabled on \"Web Inspectors\" that understand the `%c` formatting\r\n  option. These are WebKit web inspectors, Firefox ([since version\r\n  31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))\r\n  and the Firebug plugin for Firefox (any version).\r\n\r\n  Colored output looks something like:\r\n\r\n  ![](https://cloud.githubusercontent.com/assets/71256/3139768/b98c5fd8-e8ef-11e3-862a-f7253b6f47c6.png)\r\n\r\n### stderr vs stdout\r\n\r\nYou can set an alternative logging method per-namespace by overriding the `log` method on a per-namespace or globally:\r\n\r\nExample _stdout.js_:\r\n\r\n```js\r\nvar debug = require('debug');\r\nvar error = debug('app:error');\r\n\r\n// by default stderr is used\r\nerror('goes to stderr!');\r\n\r\nvar log = debug('app:log');\r\n// set this namespace to log via console.log\r\nlog.log = console.log.bind(console); // don't forget to bind to console!\r\nlog('goes to stdout');\r\nerror('still goes to stderr!');\r\n\r\n// set all output to go via console.info\r\n// overrides all per-namespace log settings\r\ndebug.log = console.info.bind(console);\r\nerror('now goes to stdout via console.info');\r\nlog('still goes to stdout, but via console.info now');\r\n```\r\n\r\n### Save debug output to a file\r\n\r\nYou can save all debug statements to a file by piping them.\r\n\r\nExample:\r\n\r\n```bash\r\n$ DEBUG_FD=3 node your-app.js 3> whatever.log\r\n```\r\n\r\n## Authors\r\n\r\n - TJ Holowaychuk\r\n - Nathan Rajlich\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2014 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/debug.git"
  },
  "version": "2.2.0"
}
